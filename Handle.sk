module SKFS;

mutable class Writer{
  private writes: mutable Map<BaseName, Array<File>> = mutable Map[],
} {
  mutable fun writeArray(key: BaseName, values: Array<File>): void {
    this.writes![key] = values;
  }

  mutable fun write(key: BaseName, value: File): void {
    this.writes![key] = Array[value];
  }

  mutable fun remove(key: BaseName): void {
    this.writes![key] = Array[];
  }

  fun getWrites(): Array<(BaseName, Array<File>)> {
    result = mutable Vector[];
    for (key => values in this.writes) {
      result.push((key, values));
    };
    result.toArray()
  }
}

class Handle<T: frozen>(conv: File ~> T, dirName: DirName) {
  static fun lazy<T: File>(
    conv: File ~> T,
    context: mutable Context,
    dirNameStr: String,
    f: (mutable Context, Handle<T>, BaseName) ~> T,
  ): Handle<T> {
    dirName = DirName::create(dirNameStr);
    dir = Dir::lazy(context, dirName, (context, dirName, key) ~> {
      if (context.lazyVisitedSet.contains(Path(dirName, key))) {
        msg = "Error: cyclic lazy data " + " ".join(context.lazyVisitedList);
        return ErrorFile(
          List[ErrorTrace(dirName.toString(), key.toString(), msg)],
        )
      };
      oldLazyVisitedList = context.lazyVisitedList;
      oldLazyVisitedSet = context.lazyVisitedSet;
      onExit = () -> {
        context.!lazyVisitedList = oldLazyVisitedList;
        context.!lazyVisitedSet = oldLazyVisitedSet;
      };
      context.!lazyVisitedList = List.Cons(
        Path(dirName, key),
        oldLazyVisitedList,
      );
      context.!lazyVisitedSet = context.lazyVisitedSet.add(Path(dirName, key));
      try {
        result = f(context, Handle(conv, dirName), key);
        onExit();
        result
      } catch {
      | exn ->
        onExit();
        msg = exn.getMessage();
        trace = ErrorTrace(dirName.toString(), key.toString(), msg);
        ErrorFile(List[trace])
      }
    });
    Handle(conv, dir.dirName)
  }

  fun union(
    context: mutable Context,
    dirNameStr: String,
    others: Array<Handle<T>>,
  ): Handle<T> {
    thisDir = context.getDir(this.dirName);
    dir = thisDir.union(
      context,
      dirNameStr,
      others.map(handle -> context.getDir(handle.dirName)),
    );
    Handle(this.conv, dir.dirName)
  }

  private fun genericMap<T2: File>(
    conv: File ~> T2,
    context: mutable Context,
    dirNameStr: String,
    f: (mutable Context, mutable Writer, BaseName, Array<T>) ~> void,
  ): Handle<T2> {
    thisDir = context.getDir(this.dirName);
    dir = thisDir.apply(context, dirNameStr, (context, writer, key, files) ~> {
      try {
        if (files.size() == 0) return void;
        f(context, writer, key, files.map(x -> this.conv(x)));
      } catch {
      | ErrorFile(trace) ->
        traceElt = ErrorTrace(
          thisDir.dirName.toString(),
          key.toString(),
          "propagated",
        );
        !trace = List.Cons(traceElt, trace);
        writer.write(key, ErrorFile(trace))
      | exn ->
        traceElt = ErrorTrace(
          thisDir.dirName.toString(),
          key.toString(),
          exn.getMessage(),
        );
        trace = List.Cons(traceElt, List.Nil());
        writer.write(key, ErrorFile(trace))
      }
    });
    Handle(conv, dir.dirName)
  }

  fun duplicateError(key: BaseName, files: Array<T>): ErrorFile {
    traceElt = ErrorTrace(
      this.dirName.toString(),
      key.toString(),
      "duplicate keys: " + inspect(files).toString(),
    );
    trace = List.Cons(traceElt, List.Nil());
    ErrorFile(trace)
  }

  fun map<T2: File>(
    conv: File ~> T2,
    context: mutable Context,
    dirNameStr: String,
    f: (T) ~> T2,
  ): Handle<T2> {
    this.genericMap(conv, context, dirNameStr, (_, writer, key, files) ~> {
      if (files.size() >= 2) {
        errFile = this.duplicateError(key, files);
        writer.write(key, errFile);
        return void;
      };
      result = f(files[0]);
      writer.write(key, result);
    })
  }

  fun contextMap<T2: File>(
    conv: File ~> T2,
    context: mutable Context,
    dirNameStr: String,
    f: (mutable Context, T) ~> T2,
  ): Handle<T2> {
    this.genericMap(conv, context, dirNameStr, (context, writer, key, files) ~> {
      if (files.size() >= 2) {
        errFile = this.duplicateError(key, files);
        writer.write(key, errFile);
        return void;
      };
      result = f(context, files[0]);
      writer.write(key, result);
    })
  }

  fun contextWriterMap<T2: File>(
    conv: File ~> T2,
    context: mutable Context,
    dirNameStr: String,
    f: (mutable Context, mutable Writer, T) ~> void,
  ): Handle<T2> {
    this.genericMap(conv, context, dirNameStr, (context, writer, key, files) ~> {
      if (files.size() >= 2) {
        errFile = this.duplicateError(key, files);
        writer.write(key, errFile);
        return void;
      };
      f(context, writer, files[0]);
    })
  }

  fun contextWriterKeyMap<T2: File>(
    conv: File ~> T2,
    context: mutable Context,
    dirNameStr: String,
    f: (mutable Context, mutable Writer, BaseName, T) ~> void,
  ): Handle<T2> {
    this.genericMap(conv, context, dirNameStr, (context, writer, key, files) ~> {
      if (files.size() >= 2) {
        errFile = this.duplicateError(key, files);
        writer.write(key, errFile);
        return void;
      };
      f(context, writer, key, files[0]);
    })
  }

  fun contextWriterKeyValues<T2: File>(
    conv: File ~> T2,
    context: mutable Context,
    dirNameStr: String,
    f: (mutable Context, mutable Writer, BaseName, Array<T>) ~> void,
  ): Handle<T2> {
    this.genericMap(conv, context, dirNameStr, (context, writer, key, files) ~> {
      f(context, writer, key, files);
    })
  }

  fun getArray(context: mutable Context, key: BaseName): Array<T> {
    dir = context.getDir(this.dirName);
    results = dir.getArray(context, key).map(this.conv);
    results
  }

  fun get(context: mutable Context, key: BaseName): T {
    values = this.getArray(context, key);
    if (values.size() >= 2) {
      errFile = this.duplicateError(key, values);
      throw (errFile);
    };
    values[0]
  }

  fun containsKey(context: mutable Context, key: BaseName): Bool {
    this.getArray(context, key).size() > 0
  }

  fun maybeGet(context: mutable Context, key: BaseName): ?T {
    values = this.getArray(context, key);
    if (values.size() == 0) return None();
    Some(values[0])
  }

  fun pre(context: mutable Context): ?Handle<T> {
    if (!context.hasPre.contains(this.dirName)) {
      context.!hasPre = context.hasPre.add(this.dirName);
      return None();
    };
    context.maybeGetDir(this.dirName.pre()) match {
    | None() -> None()
    | Some(dir) -> Some(Handle(this.conv, dir.dirName))
    }
  }

  fun next(context: mutable Context): Handle<T> {
    dirName = this.dirName.next();
    if (!context.hasNext.contains(this.dirName)) {
      fixedData = FixedData{dirName, data => Array[]};
      dir = Dir{
        time => context.timeStamp(),
        isInput => true,
        dirName,
        fixedData,
      };
      context.setDir(dirName, dir);
      return Handle(this.conv, dirName)
    };
    Handle(this.conv, dirName)
  }
}

module end;
