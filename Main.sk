module SKFS;

const args: Array<String> = arguments();
const isSqlMode: Bool = args.size() > 1 && args[0] == "sql";

module end;

untracked fun main(): void {
  if (SKFS.args.size() == 0) {
    print_error("Command parameters missing");
    exit(2);
  };
  SKFS.args[0] match {
  | "sql" ->
    context = SKSQL.eval(SKFS.args);
    if (SKFS.args.size() > 1 && SKFS.args[1] == "--toplevel") {
      SKFS.toplevel(context)
    }
  | "all" ->
    testFuns = SKFSTest.getAllTests();
    for (testName => testFun in testFuns) {
      print_string(
        "/*****************************************************************************/",
      );
      print_string("/* " + testName + " */");
      print_string(
        "/*****************************************************************************/",
      );
      _ = testFun();
      print_string("");
    }
  | "toplevel" | "test" ->
    if (SKFS.args.size() <= 1) {
      print_error("Error: missing test name");
      exit(3);
    };
    testFuns = SKFSTest.getAllTests();
    testName = SKFS.args[1];
    if (!testFuns.containsKey(testName)) {
      print_error("Error: unknown test " + testName + "\n");
      for (key => _ in testFuns) {
        print_error("  " + key + "\n");
      };
      exit(4);
    };
    context = testFuns[testName]();
    if (SKFS.args[0] == "toplevel") {
      SKFS.toplevel(context)
    }
  | cmd -> print_error("Error: unknown command " + cmd + "\n")
  }
}
