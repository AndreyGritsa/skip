module SKFS;

const args: Array<String> = arguments();

module end;

untracked fun main(): void {
  //  SKFS.toplevel(mutable SKFS.Context{});
  //  SKSQL.eval(SKFS.args);
  //_ = SKFSTest.testSql();

  SKFS.args[0] match {
  | "runtime" -> SKFSTest.testRuntime()
  | "query" -> SKFS.toplevel(SKFS.testIndex())
  | "search" ->
    context = SKFSTest.testSearch();
    SKFS.toplevel(context)
  | "stress" ->
    round = if (SKFS.args.size() > 1) Some(SKFS.args[1].toInt()) else None();
    _ = SKFSTest.testInterpretor(round)
  | "sql" -> _ = SKSQL.eval(SKFS.args)
  | "toplevel" | "test" ->
    if (SKFS.args.size() <= 1) {
      print_error("Error: missing test name");
      exit(3);
    };
    testFuns = SKFSTest.getAllTests();
    testName = SKFS.args[1];
    if (!testFuns.containsKey(testName)) {
      print_error("Error: unknown test " + testName + "\n");
      for (key => _ in testFuns) {
        print_error("  " + key + "\n");
      };
      exit(4);
    };
    context = testFuns[testName]();
    if (SKFS.args[0] == "toplevel") {
      SKFS.toplevel(context)
    }
  | cmd -> print_error("Error: unknown command " + cmd + "\n")
  }
}
