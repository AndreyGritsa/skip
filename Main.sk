module alias AP = ArgumentParser;

const argsSchema: Array<AP.Param> = Array[
  AP.BoolParam{name => "all", help => "run all the tests", negatable => false},
  AP.BoolParam{name => "debug", help => "", negatable => false},
  AP.StringParam{name => "test", help => "The name of the test to run"},
  AP.StringParam{name => "init", help => "Initializes a new data file"},
  AP.StringParam{name => "data", help => "Loads an existing data file"},
];

const parsedArgs: AP.ParseResult = AP.parse(argsSchema, arguments()) match {
| Success(value) -> value
| Failure(error) ->
  print_error(error.getMessage());
  exit(2)
};

const argMap: Map<String, AP.Value> = parsedArgs.argumentValues;

untracked fun main(): void {
  if (parsedArgs.unknown.size() != 0) {
    unknownOptions = parsedArgs.unknown.filter(x ->
      x != "" && x.getIter().next() == Some('-')
    );
    for (option in unknownOptions) {
      if (option != "--help") print_error("Unknown option: " + option);
    };
    if (unknownOptions.size() != 0) {
      print_error(AP.help(argsSchema));
      exit(2);
    }
  };
  argFiles = parsedArgs.unknown.toArray();
  if (argFiles.size() > 0) {
    for (file in argFiles) {
      print_error("Error: don't know what to do with " + file);
    };
    exit(2);
  };
  if (argMap.maybeGet("all") is Some(AP.BoolValue _)) {
    testFuns = SKFSTest.getAllTests();
    for (testName => testFun in testFuns) {
      print_string(
        "/*****************************************************************************/",
      );
      print_string("/* " + testName + " */");
      print_string(
        "/*****************************************************************************/",
      );
      _ = testFun();
      print_string("");
    };
    return void;
  } else if (argMap.maybeGet("test") is Some(AP.StringValue _)) {
    testFuns = SKFSTest.getAllTests();
    testName = argMap["test"] match {
    | AP.StringValue{value => testName} ->
      if (!testFuns.containsKey(testName)) {
        print_error("Error: unknown test " + testName + "\n");
        for (key => _ in testFuns) {
          print_error("  " + key + "\n");
        };
        exit(4);
      };
      testName
    | _ ->
      print_error("Invalid test name type");
      exit(2)
    };
    context = testFuns[testName]();
    if (argMap.maybeGet("debug") is Some(AP.BoolValue _)) {
      SKFS.toplevel(context)
    } else {
      return void
    };
  } else if (argMap.maybeGet("init") is Some(AP.StringValue _)) {
    SKFS.runWithGc(SKSQL.makeSqlContext().clone(), (ctx) ~> SKFS.CStop(ctx));
    return void;
  } else if (argMap.maybeGet("data") is Some(AP.StringValue _)) {
    // this was handled in the C++ side
    void
  };
  if (argMap.maybeGet("debug") is Some(AP.BoolValue _)) {
    SKFS.toplevel(mutable SKFS.Context{});
  } else {
    SKSQL.eval(SKSQL.makeSqlContext())
  }
}
