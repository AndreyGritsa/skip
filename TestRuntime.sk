module SKFSTest;

class MyEx(value: Int) extends Exception

fun makeExn(): Int {
  throw MyEx(22);
}

fun testRuntime(): void {
  chars = Array['a', 'b', 'c'];
  expectEq("String::replace", "xbc", () ->
    String::fromChars(chars).replace("a", "x")
  );
  str = "abc";
  str2 = "123";
  expectEq("String LT", (LT() : Order), () -> str.compare(str2));
  expectEq("String LT", (EQ() : Order), () -> str.compare("abc"));
  expectEq("String LT", (GT() : Order), () -> str2.compare(str));
  expectEq("String.concat2", "abc123", () -> str + str2);
  expectEq("String.byteSize", 3, () -> String.byteSize(str));

  expectEq("throw", 22, () -> {
    vtry(
      () -> makeExn(),
      exn -> {
        exn match {
        | MyEx(x) -> x
        | e -> throw e
        }
      },
    )
  });
  arr = Array[Array[1], Array[2], Array[3]];
  expectEq("getArraySize", 3, () -> getArraySize(arr));
  expectEq("hash", 96354, () -> str.hash());
  expectEq("String.getByte", 'b'.code(), () -> String.getByte(str, 1).toInt());
  expectEq("substring", "c", () -> {
    iter = str.getIter();
    str.substring(iter.drop(2));
  });
  expectEq("ArrayEach", 6, () -> {
    result = 0;
    Array[1, 2, 3].each(x -> !result = result + x);
    result
  });
}
