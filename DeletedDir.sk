/*****************************************************************************/
/* Place Holder when a dictionary is delted */
/*****************************************************************************/
module SKFS;

class DeletedDir{time: Int, dirName: DirName} extends Dir {
  static fun addDirtyReader(mutable Context, DirName, DirName, BaseName): void {
    void
  }
  static fun updateDirtyReaders(mutable Context, Path): void {
    void
  }
  fun isInput(): Bool {
    false
  }
  fun reset(mutable Context): void {
    void
  }
  fun getTime(): Int {
    this.time
  }
  fun getArrayRaw(BaseName): Array<File> {
    Array[]
  }

  fun getArray(mutable Context, BaseName): Array<File> {
    Array[]
  }

  fun writeEntry(mutable Context, Path, BaseName, Array<File>): this {
    this
  }

  fun unsafeIterKeys((BaseName, Int) -> void): void {
    void
  }
  fun files(): Set<BaseName> {
    Set[]
  }
  fun getDirName(): DirName {
    this.dirName
  }
  fun getOld(DirName, BaseName): Array<BaseName> {
    Array[]
  }

  fun updateReaders(
    mutable Context,
    DirName,
    readonly Vector<RowMapped<Array<File>>>,
  ): void {
    void
  }
  fun updateNewDirs(
    mutable Context,
    BaseName,
    SortedSet<DirName>,
  ): (this, Vector<DirName>) {
    (this, Vector[])
  }
  fun writeArray(mutable Context, BaseName, Array<File>): void {
    void
  }
  fun write(mutable Context, BaseName, File): void {
    void
  }
  fun remove(mutable Context, BaseName): void {
    void
  }
  fun isDeleted(): Bool {
    true
  }
}
