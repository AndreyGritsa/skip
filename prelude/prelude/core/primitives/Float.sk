/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

native value class Float uses Number {
  @intrinsic
  native fun ==(other: Float): Bool;
  @intrinsic
  native fun !=(other: Float): Bool;
  @intrinsic
  native fun +(other: Float): Float;
  @intrinsic
  native fun -(other: Float): Float;
  @intrinsic
  native fun *(other: Float): Float;
  @intrinsic
  native fun /(other: Float): Float;
  @intrinsic
  native fun <(other: Float): Bool;
  @intrinsic
  native fun >(other: Float): Bool;
  @intrinsic
  native fun <=(other: Float): Bool;
  @intrinsic
  native fun >=(other: Float): Bool;

  /*
   * Float should /not/ be Orderable, because Orderable implies a total
   * order, and in floating point NaNs are incomparable with everything
   * (including themselves). But, in practice, this is a too strong a
   * constraint to prevent doing min/max of two floats or to sort a vector
   * of floats.
   */
  fun compare(other: Float): Order {
    if (this < other) {
      LT()
    } else if (this == other) {
      EQ()
    } else {
      GT()
    }
  }

  // The equality and comparison operators for Float follow the IEEE definition
  // Meaning they do not define an identity relation. Use isEqual for that.
  fun isEqual(other: Float): Bool {
    this.toBits() == other.toBits()
  }

  // This hack does (-0.0 - this) so that 0.0 negates to -0.0.
  fun negate(): Float {
    (0.0 * (0.0 - 1.0)) - this
  }

  const inf: Float = 1.0 / 0.0;
  const nan: Float = 0.0 / 0.0;

  fun isNaN(): Bool {
    this != this
  }

  fun fromInt(x: Int): Float {
    x.toFloat()
  }

  fun fromFloat(x: Float): Float {
    x
  }

  fun toFloat(): Float {
    this
  }

  /** Converts a float to a string.
   * Special values are formatted as "inf", "-inf", and "nan".
   * Integer values are formatted as Int::toString(), with a trailing ".0".
   * All other values are formatted by the "%.17g" printf format.
   * See http://pubs.opengroup.org/onlinepubs/009695399/functions/fprintf.html
   */
  @intrinsic
  native fun toString(): String;
  @intrinsic
  native fun toBits(): Int;
  @intrinsic
  native fun toInt(): Int;

  fun inspect(): Inspect {
    InspectLiteral(this.toString())
  }

  fun hash(): Int {
    // Hash using raw FP bits, but make sure that -0.0 and 0.0 have the
    // same hash since they are ==.
    //
    // But be very careful using Floats in hash tables, because NaN does
    // not compare equal to itself!
    bits = this.toBits();
    if (bits == 0) {
      (-0.0).toBits()
    } else {
      bits
    }
  }
}
