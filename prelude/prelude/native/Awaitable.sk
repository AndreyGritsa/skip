/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module Awaitable;

@intrinsic
native fun .awaitSynchronously<T>(awaitHandle: ^T): T;

// NOTE: These classes are used internally by the compiler-generated code --
// don't be fooled by the apparently unused private methods etc.

// See docs/developer/Awaitable-internals.md.

// This is a pointer to a C++ MemoValue, only used transiently to convert
// data back and forth from a Skip object (e.g. a 3-tuple) to a C++ MemoValue
// (which may require boxing/interning).
private mutable value class MemoValuePtr(
  private address: mutable Runtime.NonGCPointer,
)

mutable private base class AwaitableBase private (
  private mutable continuation: Unsafe.RawStorage<mutable AwaitableBase>,

  // If an Exception was recorded, what that Exception was.
  private mutable exception: Unsafe.RawStorage<Exception>,

  // "next" in intrusive linked list of Awaitables, e.g. for some
  // Awaitable's list of waiters stored in 'continuation'.
  private mutable nextAwaitable: Unsafe.RawStorage<mutable AwaitableBase>,
) {
  // Internal method: advance the awaitable function body state machine.
  // Invoked the first time the async function is called, and each time
  // a suspended "await" resumes.
  mutable protected fun next(): void;

  fun inspect(): Inspect {
    InspectObject("Awaitable", Array[])
  }

  protected mutable fun setMemoValue(memoValue: mutable MemoValuePtr): void;
}

mutable base class .Awaitable<+T> private (
  private mutable value: Unsafe.RawStorage<T>,
) extends AwaitableBase {
  @always_inline
  private mutable fun unsafeGetValue(): T {
    Unsafe.RawStorage::unsafeGet(this.value)
  }

  @always_inline
  protected mutable fun setValue(value: T): void {
    this.!value = Unsafe.RawStorage::make(value)
  }

  protected mutable fun setMemoValue(memoValue: mutable MemoValuePtr): void {
    boxMemoValue(memoValue, this.unsafeGetValue())
  }

  // This is a dummy method to prevent creating concrete subclasses outside
  // this module.  The user can't name the class to specify the argument
  // type so they can't provide an implementation.
  protected fun privacyHack(x: mutable Ref<AwaitablePrivacyHack>): void;
}

private mutable base class MemoReturnAwaitableBase {
  mutable fun setFromMemoValue(memoValue: readonly MemoValuePtr): void;
}

// This is a special Awaitable that the compiler produces and passes into
// the runtime when calling a memoized function (whether or not it is
// marked as "async"). The runtime eventually fills in the return value
// and pokes any suspended waiters, as for any Awaitable, but these
// Awaitables do not have code of their own.
private mutable class MemoReturnAwaitable<+T> extends
  Awaitable<T>,
  MemoReturnAwaitableBase,
{
  mutable fun setFromMemoValue(memoValue: readonly MemoValuePtr): void {
    this.setValue(unboxMemoValue(memoValue))
  }

  mutable protected fun next(): void {
    invariant_violation("MemoReturnAwaitable::next should not be called")
  }

  protected fun privacyHack(_: mutable Ref<AwaitablePrivacyHack>): void {
    void
  }
}

// Template used internally by the compiler to codegen Awaitable subclasses.
private mutable class AwaitableTemplate<+T>() extends Awaitable<T> {
  mutable protected fun next(): void {
    void
  }

  protected fun privacyHack(_: mutable Ref<AwaitablePrivacyHack>): void {
    void
  }
}

// This class exists only to allow module code to call dangerous methods
// in a way that doesn't make them easily accessible outside this module
// (although users could still do this same trick, sigh).
private mutable base class AwaitablePrivacyHack() extends Awaitable<void> {
  static fun callNext(awaitable: mutable AwaitableBase): void {
    awaitable.next()
  }

  @always_inline
  static fun setValueField<T>(awaitable: mutable Awaitable<T>, value: T): void {
    awaitable.setValue(value)
  }

  @always_inline
  static fun awaitableToMemoValue(
    memoValue: mutable MemoValuePtr,
    awaitable: mutable AwaitableBase,
  ): void {
    awaitable.setMemoValue(memoValue)
  }
}

// Compiler helper function: record the given value in the Awaitable.
@always_inline
private fun awaitableSetValue<T>(
  awaitable: mutable Awaitable<T>,
  value: T,
): void {
  AwaitablePrivacyHack::setValueField(awaitable, value)
}

// If the Awaitable is in the Exception state, rethrow it.
// Else return true if it's ready, else false.
@cpp_runtime("SKIP_awaitableReadyOrThrow")
private native fun awaitableReadyOrThrow(
  awaitable: mutable AwaitableBase,
): Bool;

// This records the exception in the awaitable, wakes any suspended waiters,
// and returns. It does NOT throw an actual exception.
@cpp_runtime("SKIP_awaitableThrow")
@no_throw
private native fun awaitableThrow(
  awaitable: mutable AwaitableBase,
  exc: Exception,
): void;

// This takes an Awaitable whose "value" has already been recorded and
// moves it to the completed state, waking any suspended waiters who
// were awaiting it.
@cpp_runtime("SKIP_awaitableNotifyWaitersValueIsReady")
@no_throw
private native fun awaitableNotifyWaitersValueIsReady(
  awaitable: mutable AwaitableBase,
): void;

// Starts an Awaitable running again after the other Awaitable it was
// suspended on (via an "await") has finished.
@cpp_export("SKIP_awaitableResume")
private fun awaitableResume(awaitable: mutable AwaitableBase): void {
  AwaitablePrivacyHack::callNext(awaitable)
}

@cpp_runtime("SKIP_awaitableSuspend")
@no_throw
private native fun awaitableSuspend(
  waiter: mutable AwaitableBase,
  waitee: mutable AwaitableBase,
): void;

@cpp_runtime("SKIP_awaitableSyncOrThrow")
private native fun awaitableSyncOrThrow(awaitable: mutable AwaitableBase): void;

@cpp_runtime("SKIP_memoValueBoxFloat")
private native fun memoValueBoxFloat(
  memoValue: mutable MemoValuePtr,
  n: Float,
): void;

@cpp_runtime("SKIP_memoValueBoxInt")
private native fun memoValueBoxInt(
  memoValue: mutable MemoValuePtr,
  n: Int,
): void;

@cpp_runtime("SKIP_memoValueBoxObject")
private native fun memoValueBoxObject(
  memoValue: mutable MemoValuePtr,
  n: Runtime.GCPointer,
): void;

@cpp_runtime("SKIP_memoValueBoxString")
private native fun memoValueBoxString(
  memoValue: mutable MemoValuePtr,
  s: String,
): void;

@intrinsic
private native fun boxMemoValue<T>(
  memoValue: mutable MemoValuePtr,
  value: T,
): void;

// This takes the raw bits of a MemoValue assumed to represent a T
// and converts them to a T. If the MemoValue is an IObj it can be assumed
// to have already been registered and increfed as appropriate.
@intrinsic
private native fun unboxMemoValue<T>(memoValue: readonly MemoValuePtr): T;

// NOTE: This get subclassed by codegened subclasses.
private base class MemoizeThunkBase {
  fun call(): mutable AwaitableBase;

  fun inspect(): Inspect {
    InspectObject("MemoizeThunk", Array[])
  }
}

// Execute the code for a MemoizeThunk.
@cpp_export("SKIP_callMemoizeThunk")
private fun callMemoizeThunk(thunk: MemoizeThunkBase): mutable AwaitableBase {
  thunk.call()
}

@cpp_runtime("SKIP_memoizeCall")
@no_throw
private native fun memoizeCall(
  result: mutable AwaitableBase,
  func: MemoizeThunkBase,
): void;

// Convert the value stored in an Awaitable to a MemoValue.
//
// The runtime uses this to extract the finished value from a fulfilled
// Awaitable in a possibly-boxed form that it's able to record.
@cpp_export("SKIP_awaitableToMemoValue")
@no_throw
private fun awaitableToMemoValue(
  memoValue: mutable MemoValuePtr,
  awaitable: mutable AwaitableBase,
): void {
  AwaitablePrivacyHack::awaitableToMemoValue(memoValue, awaitable)
}

// Assign a MemoValue to a MemoReturnAwaitableBase.
@cpp_export("SKIP_awaitableFromMemoValue")
@no_throw
private fun awaitableFromMemoValue(
  memoValue: readonly MemoValuePtr,
  awaitable: mutable MemoReturnAwaitableBase,
): void {
  awaitable.setFromMemoValue(memoValue)
}
