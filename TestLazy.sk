module SKFSTest;

fun testLazy(): mutable SKFS.Context {
  context = SKFS.run(context ~> {
    dirInput = context.mkdir(
      SKFS.IntFile::fromFile,
      SKFS.DirName::create("/input/"),
      Array[(SKFS.IID(0), SKFS.IntFile(23))],
    );
    dir1 = SKFS.Handle::lazy(
      SKFS.IntFile::fromFile,
      context,
      SKFS.DirName::create("/lazy1/"),
      (context, _self, x) ~> {
        SKFS.IntFile(
          x match {
          | SKFS.IID(v) -> dirInput.getArray(context, SKFS.IID(0))[0].value + v
          | _ -> error()
          },
        )
      },
    );
    _dir2 = SKFS.Handle::lazy(
      SKFS.IntFile::fromFile,
      context,
      SKFS.DirName::create("/lazy2/"),
      (context, _self, key) ~> {
        SKFS.IntFile(dir1.getArray(context, key)[0].value)
      },
    );
  });

  input = SKFS.DirName::create("/input/");
  dir2 = SKFS.DirName::create("/lazy2/");

  expectEq("Lazy basic", Array<SKFS.File>[SKFS.IntFile(23)], () ->
    getData(context, dir2, SKFS.IID(0))
  );
  write(context, input, SKFS.IID(0), Array[SKFS.IntFile(22)]);
  context.update();

  expectEq("Lazy after update", Array<SKFS.File>[SKFS.IntFile(22)], () ->
    getData(context, dir2, SKFS.IID(0))
  );

  context
}
