module SKFSTest;

fun sumCompacter(): SKFS.ECompacter<SKFS.IntFile> {
  SKFS.ECompacter{
    init => values ~> {
      acc = 0;
      for (value in values) {
        !acc = acc + value.value;
      };
      SKFS.IntFile(acc)
    },
    update => (stateOpt, old, new) ~> {
      acc = stateOpt match {
      | None() -> 0
      | Some(state) -> SKFS.IntFile::fromFile(state).value
      };
      for (value in old) {
        !acc = acc - value.value;
      };
      for (value in new) {
        !acc = acc + value.value;
      };
      SKFS.IntFile(acc)
    },
  }
}

base class Insert<T: Orderable> uses Orderable {
  children =
  | Add(T)
  | Rem(T)

  fun compare(right: Insert<T>): Order {
    (this, right) match {
    | (Add(x), Add(y)) -> x.compare(y)
    | (Add _, _) -> LT()
    | (_, Add _) -> GT()
    | (Rem(x), Rem(y)) -> x.compare(y)
    }
  }

  fun fromAdd(): T
  | Add(x) -> x
  | _ -> invariant_violation("Unexpected Rem")
}
class MaxVal<T: Orderable>(values: Array<T>, inserts: List<Insert<T>>) {
  fun max(): (this, ?T) {
    this.inserts match {
    | List.Nil() ->
      if (this.values.size() > 0) (this, Some(this.values[0])) else {
        (this, None())
      }
    | inserts ->
      newValues = Vector<Insert<T>>::mcreateFromItems(
        this.values.map(x -> Add(x)),
      );
      newValues.extend(inserts);
      result = mutable Vector[];
      i = 0;
      while (i < newValues.size()) {
        if (i + 1 < newValues.size() && newValues[i + 1] is Rem _) {
          !i = i + 2;
        };
        newValues[i] match {
        | Rem _ -> invariant_violation("Unexpected remove")
        | Add(x) -> result.push(x)
        }
      };
      !this.values = newValues.map(x -> x.fromAdd()).toArray();
      this.max()
    }
  }
}
/*
fun updateMax(action: SKFS.ECompactAction<SKFS.IntFile>): SKFS.File {
  action match {
  | SKFS.ECInit(values) ->
    acc = 0;
    for (value in values) {
      !acc = acc + value.value;
    };
    SKFS.IntFile(acc)
  | SKFS.ECUpdate(stateOpt, last, new) ->
    debug((stateOpt, last, new));
    acc = stateOpt match {
    | None() -> 0
    | Some(state) -> SKFS.IntFile::fromFile(state).value
    };
    for (value in last) {
      !acc = acc - value.value;
    };
    for (value in new) {
      !acc = acc + value.value;
    };
    SKFS.IntFile(acc)
  }
}
*/

fun testAggregates(): mutable SKFS.Context {
  context = SKFS.run(context ~> {
    dirSInput1 = context.mkdir(
      SKFS.StringFile::fromFile,
      SKFS.DirName::create("/sinput/"),
      Array[
        (SKFS.IID(0), SKFS.StringFile("23")),
        (SKFS.IID(1), SKFS.StringFile("35")),
        (SKFS.IID(21), SKFS.StringFile("5")),
      ],
    );

    dirInput = dirSInput1.contextWriterKeyMap(
      SKFS.IntFile::fromFile,
      context,
      SKFS.DirName::create("/input/"),
      (_context, writer, key, value) ~> {
        writer.write(
          SKFS.IID(key.hash() % 10),
          SKFS.IntFile(value.value.toInt()),
        )
      },
    );

    dirMod2 = dirSInput1.contextWriterKeyValues(
      SKFS.IntFile::fromFile,
      context,
      SKFS.DirName::create("/mod10/"),
      (_context, writer, key, values) ~> {
        writer.writeArray(
          SKFS.IID(key.hash() % 10),
          values.map(x -> SKFS.IntFile(x.value.toInt())),
        )
      },
      Some(sumCompacter()),
    );

    _dirMod3 = dirMod2.contextWriterKeyValues(
      SKFS.IntFile::fromFile,
      context,
      SKFS.DirName::create("/mode10_copy/"),
      (_context, writer, key, values) ~> {
        writer.writeArray(key, values)
      },
      None(),
    );

    dirInput.addAggregate(
      SKFS.IntFile::fromFile,
      context,
      "sum",
      sumCompacter(),
    );

    _dirTotalSum = dirInput.contextWriterKeyValues(
      SKFS.IntFile::fromFile,
      context,
      SKFS.DirName::create("/totalSum/"),
      (context, writer, key, _) ~>
        writer.write(
          key,
          SKFS.IntFile::fromFile(dirInput.getAggregate(context, "sum")),
        )
      ,
    );
  });

  /***************************************************************************/
  // STARTING TESTS

  dirInput = SKFS.DirName::create("/input/");
  dirHandle = SKFS.EHandle(SKFS.IntFile::fromFile, dirInput);

  debug(dirHandle.getAggregate(context, "sum"));

  context
}
