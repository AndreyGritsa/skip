module SKFSTest;

fun testAggregates(): mutable SKFS.Context {
  context = SKFS.run(context ~> {
    dirSInput1 = context.mkdir(
      SKFS.StringFile::fromFile,
      SKFS.DirName::create("/sinput/"),
      Array[
        (SKFS.IID(0), SKFS.StringFile("23")),
        (SKFS.IID(1), SKFS.StringFile("35")),
      ],
    );

    dirInput = dirSInput1.map(
      SKFS.IntFile::fromFile,
      context,
      SKFS.DirName::create("/input/"),
      x ~> SKFS.IntFile(x.value.toInt()),
    );

    dirInput.addAggregate(
      context,
      "sum",
      SKFS.Aggregate(SKFS.IntFile(0), (stateFile, update) ~> {
        state = SKFS.IntFile::fromFile(stateFile).value;
        update match {
        | SKFS.Insert(_, files) ->
          for (file in files) {
            !state = state + SKFS.IntFile::fromFile(file).value
          }
        | SKFS.Update(_, files1, files2) ->
          for (file in files1) {
            !state = state - SKFS.IntFile::fromFile(file).value
          };
          for (file in files2) {
            !state = state - SKFS.IntFile::fromFile(file).value
          }
        | SKFS.Remove(_, files) ->
          for (file in files) {
            !state = state - SKFS.IntFile::fromFile(file).value
          }
        };
        SKFS.IntFile(state)
      }),
    );

    _dirSum = dirInput.contextMap(
      SKFS.IntFile::fromFile,
      context,
      SKFS.DirName::create("/sum/"),
      (context, _) ~>
        SKFS.IntFile::fromFile(dirInput.getAggregate(context, "sum"))
      ,
    );
  });

  /***************************************************************************/
  // STARTING TESTS

  dirInput = SKFS.DirName::create("/input/");
  dirHandle = SKFS.EHandle(SKFS.IntFile::fromFile, dirInput);

  debug(dirHandle.getAggregate(context, "sum"));

  context
}
