module SKFS;

fun getCountDir<T: frozen>(
  context: mutable Context,
  dir: Handle<T>,
  proj: Array<T> ~> Int,
): Handle<IntFile> {
  diffCountDirName = DirName::create(dir.dirName.toString() + "diffCount/");
  countDirName = DirName::create(dir.dirName.toString() + "count/");
  context
    .unsafeGetDir(dir.dirName)
    .apply(context, diffCountDirName, (context, writer, key, newValues) ~> {
      preDiffOpt = Handle(dir.conv, dir.dirName).pre(context);
      oldValues = preDiffOpt match {
      | None() -> Array[]
      | Some(preDir) -> preDir.getArray(context, key)
      };
      oldCount = if (oldValues.size() == 0) 0 else proj(oldValues);
      newCount = if (newValues.size() == 0) 0 else {
        proj(newValues.map(dir.conv))
      };
      cmp = newCount - oldCount;
      if (cmp != 0) {
        writer.write(IID(0), IntFile(cmp))
      }
    });
  countDir = Handle(IntFile::fromFile, countDirName);
  context
    .unsafeGetDir(diffCountDirName)
    .apply(context, countDirName, (context, writer, _, diffs) ~> {
      oldSums = countDir.pre(context) match {
      | None() -> Array[]
      | Some(preDir) -> preDir.getArray(context, IID(0))
      };
      acc = if (oldSums.size() == 0) 0 else oldSums[0].value;
      for (diff in diffs) {
        !acc = acc + IntFile::fromFile(diff).value;
      };
      writer.write(IID(0), IntFile(acc))
    });
  countDir
}

module end;

module SKFSTest;

fun testCount(): mutable SKFS.Context {
  SKFS.run(context ~> {
    inputFiles = mutable Map[
      SKFS.IID(0) => SKFS.StringFile("23"),
      SKFS.IID(1) => SKFS.StringFile("35"),
    ];

    testNbr = 0;
    incrTestNbr = () -> {
      !testNbr = testNbr + 1;
      testNbr
    };

    sinput = SKFS.DirName::create("/sinput/");
    dirSInput = context.mkdir(
      SKFS.StringFile::fromFile,
      sinput,
      inputFiles.items().collect(Array),
    );

    countDir = SKFS.getCountDir(context, dirSInput, _ ~> 1);
    size = 10;

    for (i in Range(0, size)) {
      files = Array[SKFS.StringFile(i.toString())];
      write(context, dirSInput, SKFS.IID(i), files);
      context.update();
      expectEq(
        `TestCount: ${incrTestNbr()}`,
        Array<SKFS.File>[SKFS.IntFile(if (i < 2) 2 else i + 1)],
        () -> {
          getData(context, countDir.dirName, SKFS.IID(0));
        },
      );
    };
    for (j in Range(0, size / 2)) {
      write(context, dirSInput, SKFS.IID(size - j - 1), Array[]);
      context.update();
      expectEq(
        `TestCount: ${incrTestNbr()}`,
        Array<SKFS.File>[SKFS.IntFile(size - j - 1)],
        () -> {
          getData(context, countDir.dirName, SKFS.IID(0))
        },
      );
    };

    for (j in Range(0, size / 2)) {
      write(
        context,
        dirSInput,
        SKFS.IID(size - j - 1),
        Array[SKFS.StringFile("x")],
      );
      context.update();
      expectEq(
        `TestCount: ${incrTestNbr()}`,
        Array<SKFS.File>[SKFS.IntFile(size / 2 + j + 1)],
        () -> {
          getData(context, countDir.dirName, SKFS.IID(0))
        },
      );
    };

    for (j in Range(0, size / 2)) {
      write(context, dirSInput, SKFS.IID(size - j - 1), Array[]);
      context.update();
      expectEq(
        `TestCount: ${incrTestNbr()}`,
        Array<SKFS.File>[SKFS.IntFile(size - j - 1)],
        () -> {
          getData(context, countDir.dirName, SKFS.IID(0))
        },
      );
    };

    for (j in Range(0, size / 2)) {
      write(context, dirSInput, SKFS.IID(size - j - 1), Array[]);
      context.update();
      expectEq(
        `TestCount: ${incrTestNbr()}`,
        Array<SKFS.File>[SKFS.IntFile(size / 2)],
        () -> {
          getData(context, countDir.dirName, SKFS.IID(0))
        },
      );
    };

    for (j in Range(0, size / 2)) {
      write(
        context,
        dirSInput,
        SKFS.IID(size - j - 1),
        Array[SKFS.StringFile("x")],
      );
      context.update();
      expectEq(
        `TestCount: ${incrTestNbr()}`,
        Array<SKFS.File>[SKFS.IntFile(size / 2 + j + 1)],
        () -> {
          getData(context, countDir.dirName, SKFS.IID(0))
        },
      );
    };
  });
}
