module SKFS;

class IntOptionFile(value: ?Int) extends File
class BaseNameOptionFile(value: ?BaseName) extends File
class DiffKeyFile(cmp: Int, key: BaseName) extends File

fun minDir<T: frozen>(
  context: mutable Context,
  dirHandle: Handle<T>,
  diffName: String,
  name: String,
): Handle<BaseNameOptionFile> {
  diffMinDirName = DirName::create(
    dirHandle.dirName.toString() + diffName + "/",
  );
  minDirName = DirName::create(dirHandle.dirName.toString() + name + "/");
  context
    .unsafeGetEagerDir(dirHandle.dirName)
    .apply(context, diffMinDirName, (context, writer, key, newValues) ~> {
      preDiffOpt = Handle(dirHandle.conv, dirHandle.dirName).pre(context);
      oldValues = preDiffOpt match {
      | None() -> Array[]
      | Some(preDir) -> preDir.getArray(context, key)
      };
      oldMin = if (oldValues.size() == 0) 0 else 1;
      newMin = if (newValues.size() == 0) 0 else 1;
      cmp = newMin - oldMin;
      if (cmp != 0) {
        writer.write(IID(0), DiffKeyFile(cmp, key))
      }
    });
  minDir = Handle(BaseNameOptionFile::fromFile, minDirName);
  diffDir = context.unsafeGetEagerDir(diffMinDirName);
  diffDir.apply(context, minDirName, (context, writer, _, diffs) ~> {
    acc: ?BaseName = minDir.pre(context) match {
    | None() -> None()
    | Some(preDir) -> preDir.getArray(context, IID(0))[0].value
    };
    for (diff in diffs) {
      keyFile = DiffKeyFile::fromFile(diff);
      if (keyFile.cmp < 0) {
        if (acc is None _) continue;
        if (acc is Some _ && acc.fromSome() < keyFile.key) continue;
        dir = context.unsafeGetDir(dirHandle.dirName);
        minData = dir.data.minKey(kv ~> {
          (key, _) = kv;
          dir.getArrayRaw(key).size() > 0
        });
        current = 0;
        minFixedData = while (current < dir.fixedData.data.size()) {
          row = dir.fixedData.data[current];
          values = dir.getArrayRaw(row.key);
          if (values.size() != 0) {
            break (Some(row.key));
          };
          !current = current + 1;
        } else {
          None()
        };
        (minData, minFixedData) match {
        | (None(), None()) -> !acc = None()
        | (x @ Some _, None())
        | (None(), x @ Some _) ->
          !acc = x
        | (Some _, Some _) -> !acc = min(minData, minFixedData)
        }
      } else {
        invariant(keyFile.cmp == 1);
        !acc = acc match {
        | None() -> Some(keyFile.key)
        | Some(y) -> Some(min(y, keyFile.key))
        }
      };
    };
    writer.write(IID(0), BaseNameOptionFile(acc));
  });
  minDir
}

module end;

module SKFSTest;

fun testMin(): mutable SKFS.Context {
  context = SKFS.run(context ~> {
    inputFiles = mutable Map[
      SKFS.IID(23) => SKFS.StringFile("23"),
      SKFS.IID(35) => SKFS.StringFile("35"),
    ];

    sinput = SKFS.DirName::create("/sinput/");
    dirSInput = context.mkdir(
      SKFS.StringFile::fromFile,
      sinput,
      inputFiles.items().collect(Array),
    );

    _minDir = SKFS.minDir(context, dirSInput, "diffMin", "min");
  });

  dirSInput = SKFS.Handle(
    SKFS.StringFile::fromFile,
    SKFS.DirName::create("/sinput/"),
  );

  minDir = SKFS.DirName::create("/sinput/min/");

  expectEq(
    "MinDir test 1",
    Array<SKFS.File>[SKFS.BaseNameOptionFile(Some(SKFS.IID(23)))],
    () -> {
      getData(context, minDir, SKFS.IID(0))
    },
  );

  write(context, dirSInput, SKFS.IID(23), Array[]);
  context.update();
  expectEq(
    "MinDir test 2",
    Array<SKFS.File>[SKFS.BaseNameOptionFile(Some(SKFS.IID(35)))],
    () -> {
      getData(context, minDir, SKFS.IID(0))
    },
  );

  write(context, dirSInput, SKFS.IID(35), Array[]);
  context.update();
  expectEq(
    "MinDir test 3",
    Array<SKFS.File>[SKFS.BaseNameOptionFile(None())],
    () -> {
      getData(context, minDir, SKFS.IID(0))
    },
  );

  write(context, dirSInput, SKFS.IID(3), Array[SKFS.StringFile("3")]);
  context.update();
  expectEq(
    "MinDir test 4",
    Array<SKFS.File>[SKFS.BaseNameOptionFile(Some(SKFS.IID(3)))],
    () -> {
      getData(context, minDir, SKFS.IID(0))
    },
  );

  write(context, dirSInput, SKFS.IID(4), Array[SKFS.StringFile("4")]);
  context.update();
  expectEq(
    "MinDir test 5",
    Array<SKFS.File>[SKFS.BaseNameOptionFile(Some(SKFS.IID(3)))],
    () -> {
      getData(context, minDir, SKFS.IID(0))
    },
  );

  write(context, dirSInput, SKFS.IID(3), Array[SKFS.StringFile("3")]);
  context.update();
  expectEq(
    "MinDir test 6",
    Array<SKFS.File>[SKFS.BaseNameOptionFile(Some(SKFS.IID(3)))],
    () -> {
      getData(context, minDir, SKFS.IID(0))
    },
  );

  write(context, dirSInput, SKFS.IID(2), Array[SKFS.StringFile("2")]);
  context.update();
  expectEq(
    "MinDir test 7",
    Array<SKFS.File>[SKFS.BaseNameOptionFile(Some(SKFS.IID(2)))],
    () -> {
      getData(context, minDir, SKFS.IID(0))
    },
  );

  write(context, dirSInput, SKFS.IID(2), Array[]);
  context.update();
  expectEq(
    "MinDir test 8",
    Array<SKFS.File>[SKFS.BaseNameOptionFile(Some(SKFS.IID(3)))],
    () -> {
      getData(context, minDir, SKFS.IID(0))
    },
  );

  write(context, dirSInput, SKFS.IID(3), Array[]);
  context.update();
  expectEq(
    "MinDir test 9",
    Array<SKFS.File>[SKFS.BaseNameOptionFile(Some(SKFS.IID(4)))],
    () -> {
      getData(context, minDir, SKFS.IID(0))
    },
  );

  write(context, dirSInput, SKFS.IID(4), Array[]);
  context.update();
  expectEq(
    "MinDir test 10",
    Array<SKFS.File>[SKFS.BaseNameOptionFile(None())],
    () -> {
      getData(context, minDir, SKFS.IID(0))
    },
  );

  context
}
