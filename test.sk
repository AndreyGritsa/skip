module Data;

const size: Int = 10;

class Order(
  orderID: String,
  customerID: String,
  orderDate: String,
) extends SKFS.File {
  fun toString(): String {
    `Order(${this.orderID}, ${this.customerID}, ${this.orderDate})`
  }
}

fun makeOrderTable(): Array<(String, Order)> {
  result = mutable Vector[];
  for (i in Range(0, size)) {
    key = i.toString();
    order = Order(key, key, "1996-09-18");
    result.push((key, order));
  };
  result.toArray()
}

class Customer(
  customerID: String,
  customerName: String,
  contactName: String,
  country: String,
) extends SKFS.File {
  fun toString(): String {
    `Customer(${this.customerID}, ${this.customerName}, ` +
      `${this.contactName}, ${this.country})`
  }
}

fun makeCustomerTable(): Array<(String, Customer)> {
  result = mutable Vector[];
  for (i in Range(0, size)) {
    key = i.toString();
    order = Customer(
      key,
      "Alfred" + key,
      "Futterkiste Maria Anders",
      "Germany",
    );
    result.push((key, order));
  };
  result.toArray()
}

class Join(x: String, y: String, date: String) extends SKFS.File {
  fun toString(): String {
    "(" + this.x + ", " + this.y + ", " + this.date + ")"
  }
}

module end;

class User{name: String, age: Int} uses Show, Orderable {
  fun toString(): String {
    `User{age => ${this.age}`
  }
}
base class Boo
class MyObj(String, i1: String, String) extends Boo uses Show {
  fun toString(): String {
    this.i1
  }
}

fun main(): void {
  context = SKFS.run(context -> {
    orderTable = context.mkdir("/tmp/orders/", Data.makeOrderTable());
    customerTable = context.mkdir("/tmp/customers/", Data.makeCustomerTable());
    join = orderTable.multiMap(
      context,
      "/queries/",
      (context, orderID, orders) ~> {
        if (orders.size() == 0) return Array[];
        order = orders[0];
        customers = customerTable.getArray(
          context,
          SKFS.BaseName::create(order.customerID),
        );
        if (customers.size() == 0) return Array[];
        customer = customers[0];
        result = Array[
          Data.Join(order.orderID, customer.customerName, order.orderDate),
        ];
        Array[(orderID, result)]
      },
    );
    _ = join.multiMap<Data.Join>(
      context,
      "/daniel/",
      (_context, orderID, joinArr) ~> {
        Array[
          (
            orderID,
            joinArr.map(join -> {
              !join.date = "DANIEL " + join.date;
              join
            }),
          ),
        ]
      },
    );
  });
  ///////////////////////////////// UPDATE
  orders = context.state.dirs[
    SKFS.DirRef<Data.Order>(SKFS.DirName::create("/tmp/orders/")),
  ];
  context.debug("/tmp/orders/2");
  context.debug("/queries/2");
  context.debug("/daniel/2");

  orders.write(context, "2", Data.Order("2", "2", "UNE NOUVELLE DATE"));
  context.update();

  context.debug("/tmp/orders/2");
  context.debug("/queries/2");
  context.debug("/daniel/2");
}
