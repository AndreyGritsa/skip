/*****************************************************************************/
/* Lazy directories. */
/*****************************************************************************/
module SKFS;

class LazyDir{
  time: Int,
  dirName: DirName,
  data: DMap<BaseName, Array<File>> = Nil(),
  lazyFun: ((mutable Context, DirName, BaseName) ~> File),
} extends Dir {
  fun isInput(): Bool {
    false
  }

  fun getTime(): Int {
    this.time
  }

  fun reset(context: mutable Context): void {
    context.setDir(this.dirName, this);
  }

  fun files(): Set<BaseName> {
    keys = mutable Set[];
    for (newKey => newValues in this.data) {
      if (newValues.size() > 0) {
        keys.insert(newKey);
      };
    };
    keys.chill()
  }

  fun getDirName(): DirName {
    this.dirName
  }

  fun isDeleted(): Bool {
    false
  }

  static fun create(
    context: mutable Context,
    dirName: DirName,
    f: (mutable Context, DirName, BaseName) ~> File,
  ): Dir {
    time = context.timeStamp();
    updateReaders = (
      dirName: DirName,
      context: mutable Context,
      key: BaseName,
    ) ~> {
      reads = context.getReads();

      for (read in reads) {
        readSet = context.newDeps.maybeGet(read) match {
        | None() -> SortedSet[]
        | Some(x) -> x
        };
        !readSet = readSet.set((dirName, dirName, key));
        context.!newDeps[read] = readSet;
      };
    };
    lazyFun = (context: mutable Context, dirName: DirName, key: BaseName) ~> {
      readsCopy = context.reads;
      context.!reads = mutable Vector[];
      result = context.vtry<File>(
        () -> {
          f(context, dirName, key)
        },
        e ->
          ErrorFile(
            List[
              ErrorTrace(dirName.toString(), key.toString(), e.getMessage()),
            ],
          )
        ,
      );
      dir = context.unsafeGetLazyDir(dirName);
      !dir.data = dir.data.set(
        TimeTag::create(context.tick),
        key,
        Array[result],
      );
      updateReaders(dirName, context, key);
      context.setDir(dirName, dir);
      if (context.debugMode) {
        name = "" + dir.dirName + key;
        print_string(`WRITTEN LAZY:  ${name} => ${inspect(result)}`);
      };
      context.!reads = readsCopy;
      result
    };
    newDir = LazyDir{time, dirName, lazyFun};
    updateDirtyReaders(context, Path(dirName.tag(), DirTag()));
    context.setDir(dirName, newDir);
    newDir
  }

  fun getArrayRaw(key: BaseName): Array<File> {
    this.data.maybeGet(key) match {
    | None() -> Array[]
    | Some(arr) -> arr
    }
  }

  fun callLazy(context: mutable Context, key: BaseName): Array<File> {
    value = this.lazyFun(context, this.dirName, key);
    !this = context.unsafeGetLazyDir(this.dirName);
    context.setDir(this.dirName, this);
    result = intern(Array[value]);
    result
  }

  static fun update(context: mutable Context, dir: LazyDir): void {
    thisDirtyReaders = SortedSet[];
    firstDirtyReaders = context.dirtyReaders.maybeGet(dir.dirName) match {
    | None() -> mutable Map[]
    | Some(m) -> m
    };

    for (dirtyReaderDirName => dirtyReaderBaseNames in firstDirtyReaders) {
      for (dirtyReaderBaseName in dirtyReaderBaseNames) {
        !thisDirtyReaders = thisDirtyReaders.add(
          Path(dirtyReaderDirName, dirtyReaderBaseName),
        );
      }
    };
    dirtyReaders = fixPoint(thisDirtyReaders, key -> {
      context
        .getDeps(key)
        .filter(x -> x.i1 == dir.dirName)
        .map(x -> Path(x.i1, x.i2))
        .collect(Set);
    });
    for (path in dirtyReaders) {
      key = path.baseName;
      !dir.data = dir.data.set(TimeTag::create(context.tick), key, Array[]);
    };
    context.setDir(dir.dirName, dir);
    for (path in dirtyReaders) {
      updateDirtyReaders(context, path);
    }
  }

  fun getArray(context: mutable Context, key: BaseName): Array<File> {
    path = Path(this.dirName, key);
    context.addDep(path);
    values = this.getArrayRaw(key);
    if (values.size() != 0) return values;
    this.callLazy(context, key)
  }
}
