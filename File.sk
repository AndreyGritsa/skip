module SKFS;

extension base class .Inspect {
  fun simplePrint(o: String -> void): void
  | .InspectSpecial(v) -> o("'" + v + "'")
  | .InspectString(v) -> o("\"" + v + "\"")
  | .InspectLiteral(v) -> o(v)
  | .InspectVector(name, values) ->
    o(name + "[");
    if (values.size() == 0) {
      o("]");
      return void;
    };
    for (i in Range(0, values.size() - 1)) {
      elt = values[i];
      elt.simplePrint(o);
      o(",");
    };
    values[values.size() - 1].simplePrint(o);
    o("]")
  | .InspectMap(name, values) ->
    o(name + "[");
    if (values.size() == 0) {
      o("]");
      return void;
    };
    for (i in Range(0, values.size() - 1)) {
      (elt, value) = values[i];
      elt.simplePrint(o);
      o("=>");
      value.simplePrint(o);
      o(",");
    };
    (elt, value) = values[values.size() - 1];
    elt.simplePrint(o);
    o("=>");
    value.simplePrint(o);
    o(",");
    o("]")
  | .InspectCall(name, values) ->
    o(name + "(");
    if (values.size() == 0) {
      o(")");
      return void;
    };
    for (i in Range(0, values.size() - 1)) {
      elt = values[i];
      elt.simplePrint(o);
      o(",");
    };
    values[values.size() - 1].simplePrint(o);
    o(")")
  | .InspectObject(name, values) ->
    o(name + "{");
    if (values.size() == 0) {
      o("}");
      return void;
    };
    for (i in Range(0, values.size() - 1)) {
      (key, value) = values[i];
      o(key);
      o("=>");
      value.simplePrint(o);
      o(",");
    };
    (key, value) = values[values.size() - 1];
    o(key);
    o("=>");
    value.simplePrint(o);
    o(",");
    o("}")

  fun toString(): String {
    buffer = mutable Vector[];
    o = (x) -> buffer.push(x);
    this.simplePrint(o);
    "".join(buffer);
  }
}

class ErrorTrace(origDir: String, key: String, msg: String)
class ErrorFile(trace: List<ErrorTrace>) extends File, Exception {
  fun getMessage(): String {
    this.toString()
  }

  fun toString(): String {
    result = mutable Vector[];
    for (elt in this.trace) {
      result.push(`${elt.origDir}${elt.key}: ${elt.msg}\n`)
    };
    "".join(result)
  }
}

class IntFile(value: Int) extends File uses Orderable, Show {
  fun +<T: Integral>(x: T): IntFile {
    !this.value = this.value + x;
    this
  }
  fun toString(): String {
    this.value.toString()
  }
}

class StringFile(value: .String) extends File

base class File {
  deferred macro static fun fromFile(obj: File): this {
    obj match {
    | error @ ErrorFile _ -> throw (error)
    | x @ #ThisClass _ -> x
    }
  }
}

trait CGroup {
  fun zero(): inst;
  fun +(inst): inst;
  fun -(inst): inst;
}

base class CGroupFile extends File uses CGroup

extension class .Int uses CGroup {
  fun zero(): .Int {
    0
  }
}

module end;
