module SKFSTest;

fun testPre(): mutable SKFS.Context {
  SKFS.run(context ~> {
    //    getData = (dir, key) -> context.getDir(dir.dirName).getArrayRaw(key);
    context.!debugMode = true;
    dirSInput = context.mkdir(
      SKFS.StringFile::fromFile,
      SKFS.DirName::create("/sinput/"),
      Array[
        (SKFS.IID(0), SKFS.StringFile("23")),
        (SKFS.IID(1), SKFS.StringFile("35")),
      ],
    );

    _dirSInput2 = context.mkdir(
      SKFS.StringFile::fromFile,
      SKFS.DirName::create("/sinput2/"),
      Array[
        (SKFS.IID(0), SKFS.StringFile("44")),
        (SKFS.IID(1), SKFS.StringFile("45")),
      ],
    );

    dirInput = dirSInput.map(
      SKFS.IntFile::fromFile,
      context,
      SKFS.DirName::create("/input/"),
      x ~> SKFS.IntFile(x.value.toInt()),
    );
    _dir = dirInput.contextWriterKeyMap(
      SKFS.IntFile::fromFile,
      context,
      SKFS.DirName::create("/diff/"),
      (context, writer, key, valueFile) ~> {
        preOpt = dirInput.pre(context);
        preOpt match {
        | None() -> writer.write(key, SKFS.IntFile(0))
        | Some(pre) ->
          pre.maybeGet(context, key) match {
          | None() -> writer.write(key, SKFS.IntFile(0))
          | Some(old) ->
            diff = valueFile.value - old.value;
            writer.write(key, SKFS.IntFile(diff))
          }
        }
      },
    );
  });
}
