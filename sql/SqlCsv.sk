module SKCSV;

base class Token {
  children =
  | NewLine()
  | Comma()
  | Chars(Array<Char>)
}

fun lexRaw(next: () -> Char): mutable Iterator<Token> {
  acc = mutable Vector[];
  lastIsString = false;
  loop {
    next() match {
    | '\n' ->
      if (!lastIsString) {
        str = acc.toArray();
        acc.clear();
        yield Chars(str);
      };
      break void
    | ',' ->
      if (!lastIsString) {
        str = acc.toArray();
        acc.clear();
        yield Chars(str);
      };
      !lastIsString = false;

      yield Comma()
    | '"' ->
      !lastIsString = true;
      acc.push('"');
      loop {
        c = next();
        acc.push(c);
        if (c == '"') {
          break void;
        }
      };
      str = acc.toArray();
      acc.clear();
      yield Chars(str)
    | x ->
      !lastIsString = false;
      acc.push(x)
    }
  }
}

base class CValue {
  children =
  | CInt(Int)
  | CFloat(Float)
  | CString(String)
}

fun trim(chars: Array<Char>): Array<Char> {
  i = 0;
  while (i < chars.size() && chars[i] == ' ') !i = i + 1;
  j = chars.size();
  while (j - 1 >= 0 && chars[j - 1] == ' ') !j = j - 1;
  chars.slice(i, j)
}

fun lex(next: () -> Char): mutable Iterator<(Bool, String)> {
  stringAcc: ?mutable Vector<Char> = None();
  isString: Bool = false;
  for (tok in lexRaw(next)) {
    (tok, stringAcc) match {
    | (Chars(chars), Some(acc)) if (chars.size() > 0 && chars[0] == '"') ->
      !isString = true;
      !chars = trim(chars);
      acc.extend(chars.slice(0, chars.size() - 1))
    | (
      Chars(chars),
      None(),
    ) if (chars.size() > 0 && chars[chars.size() - 1] == '"') ->
      !isString = true;
      !chars = trim(chars);
      !chars = chars.slice(1, chars.size() - 1);
      !stringAcc = Some(Vector::mcreateFromItems(chars))
    | _ ->
      stringAcc match {
      | None() -> void
      | Some(acc) ->
        !stringAcc = None();
        yield (isString, String::fromChars(acc.toArray()))
      };
      !isString = false;
      tok match {
      | Chars(chars) -> yield (false, String::fromChars(trim(chars)))
      | NewLine() -> break void
      | Comma() -> void
      }
    }
  };
  stringAcc match {
  | None() -> void
  | Some(acc) ->
    !stringAcc = None();
    yield (isString, String::fromChars(acc.toArray()))
  }
}

fun insert(
  context: mutable SKFS.Context,
  line: mutable Ref<Int>,
  options: SKSQL.Options,
  table: SKSQL.DirDescr,
  user: ?SKSQL.UserFile,
): SKFS.ContextOp {
  eval = SKSQL.Evaluator{options, user};
  pos = 0;
  inTransaction = false;
  paramsOpt = None();
  array = mutable Vector[];
  eof = false;
  vtry(
    () -> {
      for (_ in Range(0, 1000)) {
        values = mutable Vector[];
        for (value in lex(() -> getChar())) {
          values.push(value);
        };
        cvalues = values.map(SKSQL.parseCSVValue);
        array.push(cvalues.toArray());
        line.set(line.get() + 1);
      }
    },
    exn -> {
      if (exn is EndOfFile _) {
        !eof = true;
        return void;
      };
      print_error("Error, line " + line.get() + ": " + exn.getMessage());
      skipExit(23);
    },
  );
  f = eval.insert(
    context,
    pos,
    inTransaction,
    table,
    paramsOpt,
    array.toArray(),
  );
  if (!eof) return SKFS.CContinue(f);
  SKFS.CStop(f)
}
