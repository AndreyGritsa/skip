module SKSQL;

base class Test {
  children =
  | HashThreshold(Int)
  | TestStmt{expect: String, posBegin: Int, stmt: Stmt, posEnd: Int}
  | TestSkip()
  | TestQuery{
    qtype: String,
    sort: String,
    posBegin: Int,
    query: Query,
    posEnd: Int,
  }

  fun getStmt(): ?Stmt {
    this match {
    | TestStmt{stmt} -> Some(stmt)
    | TestQuery{query => stmt @ Select _} -> Some(stmt)
    | _ -> None()
    }
  }
}

base class Stmt {
  children =
  | Table{name: String, schema: Array<TypeDescr>, windowSize: ?Int}
  | View{name: String, query: Query}
  | Drop{kind: TableKind, name: String}
  | Delete{pos: Int, colName: ?String, name: String, where: ?Expr}
  | Index{pos: Int, name: String, fields: (String, Array<(String, IKind)>)}
  | Insert{
    pos: Int,
    name: String,
    paramsOpt: ?Array<String>,
    values: InsertValues,
  }
  | Update{name: String, sets: Array<(String, Expr)>, where: ?Expr}
  | Replace{name: String, values: InsertValues}
}

class TableName(name: FromName, asName: ?String, indexed: Bool = true)

base class TableKind {
  children =
  | TView()
  | TIndex()
  | TTable()
}

base class InsertValues {
  children =
  | IValues(Array<Value>)
  | IQuery(Query)
}

base class IKind uses Orderable {
  children =
  | INONE()
  | IASC()
  | IDESC()
}

base class FromName {
  children =
  | FName(String)
  | FQuery(Query)
}

base class Query

class Select{
  id: String,
  pos: Int,
  kind: SelectKind,
  params: ?Array<(Expr, ?String)>,
  from: ?Array<TableName>,
  join: ?Join,
  where: ?Expr,
  in_: ?Array<Expr>,
  groupBy: ?Array<(Expr, ?String)>,
  having: ?Expr,
  orderBy: ?Array<(Expr, IKind)>,
  limit: ?Expr,
  rest: ?(QueryKind, Select),
} extends Query, Stmt

class Join{
  kind: JoinKind,
  names: Array<TableName>,
  on: ?Array<(Expr, ?String)>,
}

base class JoinKind {
  children =
  | JLeft(Bool)
  | JCross()
  | JOuter()
  | JInner()
  | JNone()
}

base class SelectKind uses Orderable {
  children =
  | SAll()
  | SDistinct()
  | SNone()
}

base class QueryKind uses Orderable {
  children =
  | QExcept()
  | QUnion(QUnionKind)
  | QIntersect(Bool)
}

base class QUnionKind uses Orderable {
  children =
  | USingle()
  | UAll()
  | UIntersect()
}

base class Value {
  children =
  | VNull()
  | VInt(Int)
  | VLShift(Int, Int)
  | VFloat(Float)
  | VString(String)
}

base class Expr {
  children =
  | Literal(String, Bool)
  | Not(Expr)
  | All(Expr)
  | Distinct(Expr)
  | In(Expr, Array<Expr>)
  | Between(Expr)
  | Binop(String, Expr, Expr)
  | EQuery(Query)
  | Exists(Query)
  | UMinus(Expr)
  | UPlus(Expr)
  | Case(condOpt: ?Expr, whenCases: Array<(Expr, Expr)>, elseCase: ?Expr)
  | Call(String, ?Array<Expr>)
  | Cast(Expr, Type)
}

class TypeDescr{
  name: String,
  ty: Type,
  primary: Bool,
  unique: Bool,
} uses Orderable

base class Type uses Orderable {
  children =
  | FLOAT()
  | INTEGER()
  | TEXT()
}

/*****************************************************************************/
/* Looks for an aggregate function. */
/*****************************************************************************/

fun hasAggr(expr: Expr): Bool {
  expr match {
  | Literal _ -> false
  | Not(e)
  | All(e)
  | Between(e)
  | UMinus(e)
  | UPlus(e)
  | Distinct(e) ->
    hasAggr(e)
  | In(e, arr) ->
    hasAggr(e) ||
      for (x in arr) {
        if (hasAggr(x)) break true;
      } else {
        false
      }
  | Binop(_, e1, e2) -> hasAggr(e1) || hasAggr(e2)
  | EQuery(_)
  | Exists(_) ->
    false
  | Case(condOpt, whenCases, elseCase) ->
    condOpt match {
    | Some(e) if (hasAggr(e)) -> return true
    | _ -> void
    };
    for (kv in whenCases) {
      (e1, e2) = kv;
      if (hasAggr(e1) || hasAggr(e2)) return true;
    };
    elseCase match {
    | Some(e) if (hasAggr(e)) -> true
    | _ -> false
    }
  | Call("sum", _)
  | Call("avg", _)
  | Call("count", _) ->
    true
  | Call(_, None()) -> false
  | Call(_, Some(arr)) ->
    for (e in arr) {
      if (hasAggr(e)) return true
    };
    false
  | Cast(e, _) -> hasAggr(e)
  }
}

fun selectIsAggr(select: Select): Bool {
  select.groupBy is Some _ ||
    select.params match {
    | None() -> false
    | Some(params) ->
      for (e in params) {
        if (hasAggr(e.i0)) return true;
      };
      false
    }
}
