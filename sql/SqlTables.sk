/*****************************************************************************/
/* SQL tables.*/
/*****************************************************************************/

module SKSQL;

const tableInfo: SKFS.DirName = SKFS.DirName::create("/tablesInfo/");
const selectInput: SKFS.DirName = SKFS.DirName::create("/selectInput/");
const selectOutput: SKFS.DirName = SKFS.DirName::create("/selectOutput/");
const indexInput: SKFS.DirName = SKFS.DirName::create("/indexInput/");
const indexOutput: SKFS.DirName = SKFS.DirName::create("/indexOutput/");

extension class TypeDescr extends SKFS.File

class DirDescr{
  name: String,
  schema: Array<TypeDescr>,
  cols: Map<String, Int>,
  dirName: SKFS.DirName,
} extends SKFS.File

fun makeSelectName(id: String): SKFS.DirName {
  SKFS.DirName::create("/" + id + "/");
}

fun makeAvgName(dir: SKFS.DirName, colName: String): SKFS.DirName {
  SKFS.DirName::create(dir.toString() + "avg/" + colName + "/")
}

fun makeCountName(dir: SKFS.DirName): SKFS.DirName {
  SKFS.DirName::create(dir.toString() + "count/")
}

fun getDir(dirDescr: DirDescr): SKFS.EHandle<Row> {
  SKFS.EHandle(Row::fromFile, dirDescr.dirName)
}

fun makeDir<T: frozen>(
  fromFile: SKFS.File ~> T,
  context: mutable SKFS.Context,
  dirName: SKFS.DirName,
  make: () -> SKFS.EHandle<T>,
): SKFS.EHandle<T> {
  context.maybeGetDir(dirName) match {
  | None() -> make()
  | Some(dir) -> SKFS.EHandle(fromFile, dir.getDirName())
  };
}

fun getTableDir(context: mutable SKFS.Context): SKFS.EHandle<DirDescr> {
  makeDir(DirDescr::fromFile, context, tableInfo, () ->
    context.mkdir(DirDescr::fromFile, tableInfo, Array[])
  )
}

/*****************************************************************************/
/* Select Dirs. */
/*****************************************************************************/

fun getSelectInputDir(context: mutable SKFS.Context): SKFS.EHandle<CSelect> {
  makeDir(CSelect::fromFile, context, selectInput, () ->
    context.mkdir(CSelect::fromFile, selectInput, Array[])
  )
}

fun getSelectOutputDir(
  context: mutable SKFS.Context,
): SKFS.EHandle<SelectValue> {
  input = getSelectInputDir(context);
  makeDir(SelectValue::fromFile, context, selectOutput, () -> {
    input.contextMap(
      SelectValue::fromFile,
      context,
      selectOutput,
      (context, request) ~> evalSelect(context, request, None()),
    )
  })
}

/*****************************************************************************/
/* Indexes. */
/*****************************************************************************/

extension class Index extends SKFS.File

class IndexDescr{
  name: String,
  fields: Array<(Int, IKind, Type)>,
} extends SKFS.File

fun getIndexInputDir(context: mutable SKFS.Context): SKFS.EHandle<Index> {
  makeDir(Index::fromFile, context, indexInput, () ->
    context.mkdir(Index::fromFile, indexInput, Array[])
  )
}

fun getIndexOutputDir(context: mutable SKFS.Context): SKFS.EHandle<IndexDescr> {
  input = getIndexInputDir(context);
  makeDir(IndexDescr::fromFile, context, indexOutput, () -> {
    input.contextMap(
      IndexDescr::fromFile,
      context,
      indexOutput,
      (context, index) ~> createIndex(context, index.pos, index.fields),
    )
  })
}

/*****************************************************************************/
/* Tables. */
/*****************************************************************************/

fun getTable(
  context: mutable SKFS.Context,
  pos: Int,
  name: SKFS.BaseName,
): DirDescr {
  getTableDir(context).maybeGet(context, name) match {
  | None() -> error(pos, "Table '" + name + "' does not exist")
  | Some(x) -> x
  }
}
